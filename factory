#!/usr/bin/env python3

import os
import json
from pathlib import Path
from tempfile import TemporaryDirectory
from subprocess import run, PIPE, check_output
from contextlib import contextmanager
from argparse import ArgumentParser
import shlex

repo = Path(__file__).resolve().parent
SHARED = repo / 'shared'
IMAGES = repo / 'images'
VAR = repo / 'var'
QEMU_HACKED_ARM = repo / 'qemu-hacked-arm'


def get_arch():
    return check_output(['uname', '-m']).decode('latin1').strip()

def echo_run(cmd):
    print('+', *cmd)
    run(cmd, check=True)

@contextmanager
def cd(path):
    prev = os.getcwd()
    os.chdir(str(path))
    try:
        yield
    finally:
        os.chdir(prev)

@contextmanager
def instance(platform):
    platform_home = IMAGES / platform

    with (platform_home / 'options.json').open(encoding='utf8') as f:
        options = json.load(f)

    shared = {
        'path': str(SHARED),
        'mountpoint': '/mnt/shared',
    }

    platform = {
        'name': 'factory',
        'driver': {
            'image': str(platform_home / 'disk.img'),
            'username': 'ubuntu',
            'password': 'ubuntu',
            'hostshares': [shared],
        },
    }

    if options.get('native-arm'):
        platform['driver']['bios'] = str(platform_home / 'arm-bios.fd')
        platform['driver']['binary'] = str(QEMU_HACKED_ARM)

    elif options.get('emulate-arm'):
        platform['driver']['args'] = [{'cpu': 'cortex-a53'}]
        platform['driver']['kvm'] = False

    kitchen_yml = {
        'driver': {'name': 'qemu'},
        'platforms': [platform],
        'suites': [{'name': 'vm'}],
    }

    if not VAR.is_dir():
        VAR.mkdir()

    with TemporaryDirectory(prefix='kitchen-', dir=str(VAR)) as tmp_name:
        tmp = Path(tmp_name)
        with (tmp / '.kitchen.yml').open('w', encoding='utf8') as f:
            print(json.dumps(kitchen_yml, indent=2), file=f)

        with cd(tmp):
            try:
                echo_run(['kitchen', 'create'])
                yield
            finally:
                echo_run(['kitchen', 'destroy'])

def run_factory(platform, *args):
    parser = ArgumentParser()
    parser.add_argument('script')
    parser.add_argument('args', nargs='*')
    options = parser.parse_args(args)

    script = Path(options.script).resolve().relative_to(SHARED)

    with instance(platform):
        vm_script = Path('/mnt/shared') / script
        cmd = 'sudo {}'.format(str(vm_script))
        for arg in options.args:
            cmd += ' {}'.format(shlex.quote(arg))
        echo_run(['kitchen', 'exec', '-c', cmd])

def login(platform):
    with instance(platform):
        echo_run(['kitchen', 'login'])

COMMANDS = {
    'run': run_factory,
    'login': login,
}

DEFAULTS = {
    'x86_64': 'cloud-x86_64',
    'aarch64': 'cloud-arm64',
}


def main():
    arch = get_arch()
    if arch in DEFAULTS.keys():
        default_platform = DEFAULTS[arch]
    else:
        raise RuntimeError("Architecture {} not supported.".format(arch))

    platform_list = [x.name for x in IMAGES.iterdir() if x.is_dir()]

    parser = ArgumentParser()
    parser.add_argument('--platform',
                        choices=platform_list,
                        default=default_platform)
    parser.add_argument('command', choices=COMMANDS.keys())
    (options, args) = parser.parse_known_args()
    COMMANDS[options.command](options.platform, *args)

if __name__ == '__main__':
    main()
